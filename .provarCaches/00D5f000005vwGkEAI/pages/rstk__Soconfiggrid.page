<apex:page id="pg" standardController="rstk__soline__c" extensions="rstk.ControllerExtnSoconfiggrid,rstk.RemoteQueryController" sideBar="false" showHeader="false" action="{!doBeforePageLoad}">
	<apex:variable var="o" value="{!rstk__soline__c}" />
    <c:standardHeader cntr="{!controller}" title="{!$Label.rstk__pagetitle_soconfiggrid}" enableAutocomplete="true" enableQuickMenu="false" showHeader="false"/>
 	<apex:includeScript value="{!$Resource.rstk__sublist}"/>
  	<apex:stylesheet value="{!$Resource.rstk__ModalPopup_css}"/>
    <apex:includeScript value="{!$Resource.rstk__RowHandler_js}"/>
    <apex:includeScript value="{!$Resource.rstk__jquery_tablesorter_cli}" />
    <apex:stylesheet value="{!URLFOR($Resource.rstk__images, 'fixedTableSort.css')}" />
    
    <apex:form id="fm">
    	<apex:outputpanel style="display:none;">
          	<apex:inputField id="soline_reqdate__c" value="{!o.rstk__soline_reqdate__c}" />
          	<apex:inputField id="soline_labmarkuppct__c" value="{!o.rstk__soline_labmarkuppct__c}" />
          	<apex:inputField id="soline_mtlmarkuppct__c" value="{!o.rstk__soline_mtlmarkuppct__c}" />
          	<apex:outputField id="soline_pricemethlab__c" value="{!o.rstk__soline_pricemethlab__c}" />
          	<apex:outputField id="soline_pricemethmtl__c" value="{!o.rstk__soline_pricemethmtl__c}" />
          	<apex:outputField id="sydiv_costtype_pl__c" value="{!o.soline_shipdiv__r.rstk__sydiv_costtype_pl__c}"/>
          	<span id="soline_project__c">{!o.soline_project__c}</span>
         	<span id="sydiv_projact__c">{!o.soline_shipdiv__r.sydiv_projact__c}</span>
		</apex:outputpanel>
        <apex:pageBlock id="pb" mode="detail">
			<c:EditableGrid width="1550" jsController="soconfigs" data="{!soconfigGrid}" editable="true" ispopup="false"/>
<script>

 var divId = '{!o.soline_shipdiv__c}';
 var enableAddFromList = {!enableAddFromList};
 var isAltMethodForSOLineCostPlusCalc = {!isAltMethodForSOLineCostPlusCalc};
 var icitemInfos = {};
 
function trimzeros(field) {
	console.log('field: ' + field);
	if (field.value) {
		console.log(field.value);
		field.value = Number(field.value).toString();
	}
}

function invokeAddFromList() {
	window.open('/apex/ComponentAddFromList?type=soconfig&soline=' + '{!soline.Id}' + '&cc=' + '{!comcodId}', 
		'AddFromListWindow', "width=800,height=480");
}

function invokeLookup(rowInput) {
	lastInvokedRowInput = rowInput;
	window.open('/apex/lookupPage?searchtype__c=icitem&div=' + divId, 'lookupWindow', "width=600,height=400");
}

function populateLookupValue(id, name) {
	if (lastInvokedRowInput) {
		var ac = jQuery('input[name=' + lastInvokedRowInput + ']')[0];
		var icitemField = ac.parentElement.previousSibling;
		ac.value = name;
		icitemField.value = id;
		icitemField.onchange();
	}
}

function decimalPlaces(number) {
	  return ((+removeLocaleFormatting(number)).toFixed(10)).replace(/^-?\d*\.?|0+$/g, '').length;
}
  function cleanDecimalPlaces(number) {
	  return ((+removeLocaleFormatting(number)).toFixed(10)).replace(/0+$/g, '').replace(/\.+$/g, '');
  }
  function setDecimalPlaces(number, requiredDecPlaces) {
      var numStr = ''+cleanDecimalPlaces(number);
      var decIdx = numStr.indexOf('.');
      if (decIdx == -1)
      {
        if (requiredDecPlaces > 0)
        {
          numStr +='.';
          decIdx = numStr.indexOf('.');
        }
      }
      
      var decPlaces = numStr.length - decIdx -1;
      if (decPlaces < requiredDecPlaces)
      {
          numStr += new Array(requiredDecPlaces - decPlaces +1).join('0');
      }
	  return numStr;
  }
  function to2DecimalPlaces(number) {
    return setDecimalPlaces(Math.round(number * 100) / 100, 2);
  }
  function to3DecimalPlaces(number) {
    return setDecimalPlaces(Math.round(number * 1000) / 1000, 3);
  }
  function to6DecimalPlaces(number) {
    return setDecimalPlaces(Math.round(number * 1000000) / 1000000, 6);
  }
  function overridableValueById(localStore, entryId, ind, ifindtrue, ifindfalse, defaultValue)
  {
    var indVal = localStore.valueById(entryId, ind);
    var lookupField = indVal?ifindtrue:ifindfalse;
    return localStore.valueById(entryId, lookupField, defaultValue);;
  }
  function adjustQuantityDecimal(numPlaces, d)
  {
    if (numPlaces == null) { numPlaces = 0; }
  	if (decimalPlaces(d) > numPlaces) {
  	  showError('The value may only be defined to '+numPlaces+' decimal places for this item');
  	  d = formatLocaleFloat((+removeLocaleFormatting(d)).toFixed(numPlaces));
  	}
	  
  	return d;
  }
  function qtyOrdered() { return parseLocaleFloat(jQuery("span[id$=soline_qtyorder__c]").text()) || 0.0; }
  function solineDate() { return jQuery("input[id$=soline_reqdate__c]").val(); }

	function gup( name ) {
		name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
		var regexS = "[\\?&]"+name+"=([^&#]*)";
		var regex = new RegExp( regexS );
		var results = regex.exec( window.location.href );
		if( results == null )
			return '';
		else
			return results[1];
	}

	(function() {
	    var lastHt = 0;
	    (function resizeTimer(){
	        var curHt = document.body.offsetHeight;
	        if( lastHt != curHt ) {
	        	if (window.parent) {
	            	window.parent.postMessage('height:' + curHt + ';cc1:' + gup('cc1'), '*');
	            }
	            lastHt = curHt;
	        }
	        window.setTimeout( resizeTimer, 500);
	    })();
	})();

 var lastInvokedRowInput;
 function invokeAddFromList() {
	window.open('/apex/ComponentAddFromList?type=soconfig&soline=' + '{!soline.Id}', 
		'AddFromListWindow', "width=800,height=480");
 }
	
 soconfigs.setStaticData=function(row) {
      var icitemId = this.getRowValue(row, 'soconfig_icitem__c');
      if (!isEmpty(icitemId)) {
	      this.setRowValue(row, 'uom__g', getIteminfo(icitemId).icitem_invuom__r.Name);
	  } else {
	      this.setRowValue(row, 'uom__g', '');
	  }
      var totalRequired = this.getRowDecimal(row, 'soconfig_qtyper__c');
      if (!this.getRowValue(row, 'soconfig_fixedqty__c'))
      {
         totalRequired *= qtyOrdered();
      }
      this.setRowValue(row, 'qtyrequired__g', cleanDecimalPlaces(totalRequired));
      var meth = jQuery("span[id$=soline_pricemethmtl__c]").text();
      if (meth == 'Cost plus Markup Pct.') {
        this.getRowObj(row, 'soconfig_price__c').attr('readonly', true);
      }
 }
 
 function getIteminfo(icitemId) {
 	if (isEmpty(icitemInfos[icitemId])) {
 		var icitemInfo = sfffLookupField('icitem__c', icitemId, ['icitem_invuom__r.Name', 'icitem_descr__c', 'formula_qtydecimal__c']);
 		icitemInfos[icitemId] = icitemInfo;
 	}
 	return icitemInfos[icitemId];
 }
 
 function moveRowToTop(rowEl) {
	var pNode = rowEl.parentNode;
	var row = pNode.removeChild(rowEl);
	pNode.insertBefore(row, pNode.firstChild);
	soconfigs.rowIds.unshift('');
 }
 
 soconfigs.onGridLoad=function() {
     var self=this;
     self.getRows().each(function(){
       var row=jQuery(this);
       self.setStaticData(row);
     });
     
     if (enableAddFromList) {
		if (jQuery('input[id*=addFromList]').length == 0) {
			jQuery('input[id*=soconfigs_add]').after('<input class="btn" id="addFromList" onclick="invokeAddFromList();" type="button" value="Add From List">');
		}
	}
 }
 soconfigs.validate = function() {
     var self=this;
     var isValid = true;
     var icitems = { }
     self.getSelectableRows().each(function(){
       if (isValid) {
	       var row=jQuery(this);
	       var icitem = self.getRowValue(row, 'soconfig_icitem__c');
	       if (icitems[icitem] != null) {
			alert("{!$Label.DupLlicateInvItem_EacRowMustHaveUniqueVal}", self.getRowAutoValue(row, 'soconfig_icitem__c'));
	         isValid = false;
	       }
	       icitems[icitem] = true;
       }
     });
   return isValid;
 }
 soconfigs.resetRow = function(row) { 
 		soconfigsHandler.prototype.resetRow.call(this, row);
 		this.setRowValue(row, "soconfig_reqdate__c", solineDate());
// 		if (row.find('.lookupIcon').length == 0) {
//	 		var acInput = row.find('input[name*=autocomplete]');
//	 		acInput.after('<a href="javascript:invokeLookup(\'' + acInput[0].name + '\')"><img src="/s.gif" class="lookupIcon" title="{!$Label.Lookup}"></a>');
//	 	}
		var lineMarkup = parseLocaleFloat(jQuery("input[id$=soline_mtlmarkuppct__c]").val()) || 0.0;
		this.setRowValue(row, "soconfig_markuppct__c", lineMarkup);
 		this.setStaticData(row);
 		
 		 moveRowToTop(row[0]);
 }
 soconfigs.entryChanged=function(row, rowNum, name, value) {
    if (name == 'soconfig_qtyper__c') {
       var icitemId = this.getRowValue(row, 'soconfig_icitem__c');
       var numDecimal = (icitemId ? getIteminfo(icitemId).formula_qtydecimal__c : 6);
	   var newValue = adjustQuantityDecimal(numDecimal, value);
	   if (newValue != value)
	   { 
	   		this.setRowValue(row, name, newValue);
	   		this.getRowObj(row, name).focus();
	   }
   }

   if (name == 'soconfig_icitem__c') {
		if (!isEmpty(value)) {
			soconfigs.getRowObj(row, 'soconfig_item__c')[0].nextSibling.innerHTML = getIteminfo(value).icitem_descr__c;
		} else {
			soconfigs.getRowObj(row, 'soconfig_item__c')[0].nextSibling.innerHTML = '';
		}
   
   		var costBasis = 0.0;
   		var costType = jQuery("span[id$=sydiv_costtype_pl__c]").text();
   		if (costType == "Standard Cost") {
            costBasis = getItemStdCost(value);
   		} else if (costType == "Weighted Average Cost") {
	   		var projActive = jQuery("span[id$=sydiv_projact__c]").text() == 'true';
   			if (!projActive) {
   			  costBasis = getItemAveUnitCost(value);
   			} else {
              var proj = getProject(value);
   			  costBasis = getProjectCost(value, proj);
	   		  if (costBasis == 0) {
   			    costBasis = getItemAveUnitCost(value);
	   		  }
   			}
   		}
   		this.entryChanged(row, rowNum, 'soconfig_costbasis__c', costBasis);
        var meth = jQuery("span[id$=soline_pricemethmtl__c]").text();
        if (meth != 'Cost plus Markup Pct.') {
        	var socompps=execQuery('select socompp_price__c from socompp__c where socompp_item__c='+quote(value)+' and socompp_invdiv__c='+quote(divId));
        	if (socompps.length > 0) {
	        	this.getRowObj(row, 'soconfig_price__c').val(socompps[0].socompp_price__c);
			}
		}
   }

   if (name=='soconfig_qtyper__c')
   {
   	if (value == 0)
   	{
   		showError('The value must be greater than zero');
   		value = 1;
   		this.setRowValue(row, name, value);
   		this.getRowObj(row, name).focus();
   	}
   }
   
   if (name=='soconfig_qtyper__c' || name=='soconfig_price__c' || name=='soconfig_oper__c' || name=='soconfig_costbasis__c' || name=='soconfig_markuppct__c')
   {
   	if (value < 0)
   	{
   		showError('The value can\'t be less than zero');
   		value = 0;
   		this.setRowValue(row, name, value);
   		this.getRowObj(row, name).focus();
   	}
   	if (name=='soconfig_markuppct__c') {
	   	if (value > 999.99)
	   	{
	   		showError('The value can\'t be more than 999.99');
	   		value = 0;
	   		this.setRowValue(row, name, value);
	   		this.getRowObj(row, name).focus();
	   	}
   	}
   }
   
   if (name == 'soconfig_reqdate__c')
   {
   	var theDate = sfffStringToDate(value);
      	var today = sfffStringToDate(sfffDateToString(new Date()));
       if (today > theDate)
	{
		showWarning("The date entered is earlier than today's date");
	}
  }
  	
  if (name=='soconfig_costbasis__c' || name=='soconfig_markuppct__c') {
    this.setRowValue(row, name, (name=='soconfig_costbasis__c')?to6DecimalPlaces(value):to2DecimalPlaces(value));
    var newPrice = getCostPlusMarkupPrice(parseLocaleFloat(this.getRowValue(row, 'soconfig_costbasis__c')), this.getRowValue(row, 'soconfig_markuppct__c'));
    this.setRowValue(row, 'soconfig_price__c', to6DecimalPlaces(newPrice));
  }
 
   this.setStaticData(row);
 }

function getCostPlusMarkupPrice(costbasis, markuppct) {
  if (isAltMethodForSOLineCostPlusCalc) {
    var denom = (1.0 - markuppct / 100.0);
    if (denom > 0) {
      return costbasis / denom;
    }
    return costbasis;
  }
  return costbasis * (1.0 + markuppct / 100.0);
}

function getProjectCost(icitemId, projectId) {
	var icitemproj = execQuery("select icitemproj_actucsttot__c from icitemproj__c where icitemproj_item__c ='" + icitemId + "' and icitemproj_proj__c = '" + projectId + "'");
	if (icitemproj && icitemproj.length > 0) {
		return ensureFloat(icitemproj[0].icitemproj_actucsttot__c);
	} else {
		return 0.0;
	}
}

function getItemStdCost(icitemId) {
	var icitemstd = execQuery("select icitemstd_stducsttot__c from icitemstd__c where icitemstd_item__c ='" + icitemId + "'");
	if (icitemstd && icitemstd.length > 0) {
		return ensureFloat(icitemstd[0].icitemstd_stducsttot__c);
	} else {
		return 0.0;
	}
}

function getItemAveUnitCost(icitemId) {
	var icitemcst = execQuery("select icitemcst_lstactucsttot__c from icitemcst__c where icitemcst_item__c ='" + icitemId + "'");
	if (icitemcst && icitemcst.length > 0) {
		return ensureFloat(icitemcst[0].icitemcst_lstactucsttot__c);
	} else {
		return 0.0;
	}
}

 function getProject(icitemId) {
   if (hasHomeProjInd(icitemId)) {
     return getHomeProjectId(divId);
   }
   return jQuery("span[id$=soline_project__c]").text();
 }

 function getHomeProjectId(divId) {
	var projects = execQuery("select Id from pjproj__c where pjproj_div__c ='" + divId + "' and pjproj_proj__c = null");
	if (projects.length > 0) {
	  return projects[0].Id;
	}
	return null;
 }
 
 function hasHomeProjInd(icitemId) {
   if (icitemId != null) {
       var ix = getIcitemEx(icitemId);
	   if (ix.icitem_homeprojindind__c) {
	     return ix.icitem_iccomcod__r.iccomcod_dflthomeprojind_pl__c == 'Project Home';
	   }
	   return ix.icitem_homeprojind__c == 'Project Home';
   }
   return false;
 }

function getIcitemEx(icitemId) {
  if (icitemId == null) {
    return null;
  }
  var icitems = execQuery("select Id, icitem_homeprojind__c, icitem_homeprojindind__c, icitem_iccomcod__r.iccomcod_dflthomeprojind_pl__c"+
                          " from icitem__c where Id='"+icitemId+"'");
  if (icitems.length > 0) {
    return icitems[0];
  }
  return null;
}

</script>

        </apex:pageBlock>
		     <div id="pleaseWaitPopup" style="display:none">
                 <apex:outputPanel styleClass="topPopupBackground" layout="block"/>
                 <apex:outputPanel styleClass="topPopup">
                    <apex:image url="{!$Resource.rstk__busy}"/>
                 </apex:outputPanel>
             </div>
             
            <c:Popup popupId="notesAttach" title="{!$Label.rstk__pagepopup_soconfiggrid_notesandattachments}" cancelCaption="Close">
                <iframe id="NotesAndAttachments" height="320px" width="100%" frameborder="0" src="about:blank"></iframe>
            </c:Popup>     
    </apex:form>
    
    <c:footerInclude cntr="{!controller}" />
</apex:page>