<apex:page id="pg" standardController="rstk__socontainer__c" extensions="rstk.ControllerExtnSOContainer,rstk.RemoteQueryController" sideBar="true" action="{!doBeforePageLoad}">
    <apex:variable var="c" value="{!rstk__socontainer__c}" />
    <apex:variable var="f" value="{!$ObjectType.rstk__socontainer__c.fields}" /> 
    <apex:variable var="f_el" value="{!$ObjectType.rstk__socontainel__c.fields}" />
    <apex:variable var="f_soship" value="{!$ObjectType.rstk__soship__c.fields}" />
    <c:standardHeader cntr="{!controller}" title="{!$Label.rstk__pagetitle_socontainer}" enableAutocomplete="true"/>
    <apex:includeScript value="{!$Resource.rstk__RowHandler_js}"/>
    <style type="text/css">
       .modalPopup{
            background-color: white;
            border-style: solid;
            border-width: 3px;
            padding:1px;
            position: absolute;
            z-index: 11;
            width: 650px;
            top:100px;
            overflow:auto;
        }
       .topPopup{
            background-color: transparent;
            border-style: none;
            position: absolute;
            z-index: 10001;
            width: 50px;
            top:100px;
        }
        .popupBackground{
            background-color:black;
            opacity: 0.20;
            position:absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: 10;
        }
        .topPopupBackground{
            background-color:green;
            opacity: 0.10;
            position:absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: 10000;
        }
        .ac_results {
            z-index: 10000;
        }
    </style>
    
    <apex:form id="fm">
        <apex:actionFunction name="doDelete" action="{!doDelete}" immediate="true"/>
        <apex:actionFunction name="doView" action="{!view}" immediate="true"/>
        <apex:actionFunction name="doEdit" action="{!edit}" immediate="true"/>
        <apex:actionFunction name="doOverCancel" action="{!cancel}" immediate="true"/>
        <apex:actionFunction name="doListview" action="{!doListview}" immediate="true"/>
        <apex:actionFunction name="doSave" action="{!save}"/>
        <apex:actionFunction name="updateNetWeight" action="{!updateNetWeight}" immediate="true" reRender="socontainer_grosswt__c">
            <apex:param name="netWeight" value=""/>
        </apex:actionFunction>
        <apex:actionFunction name="updateTareWeight" action="{!updateTareWeight}" immediate="true" reRender="socontainer_tarewt__c,socontainer_grosswt__c">
            <apex:param name="tareWeight" value=""/>
        </apex:actionFunction>
        <apex:actionFunction name="updateContainerTypeTareWeight" action="{!updateContainerTypeTareWeight}" immediate="true" reRender="socontainer_tarewt__c,socontainer_grosswt__c">
            <apex:param name="containerTypeId" value=""/>
        </apex:actionFunction>
        <apex:actionFunction name="updateDeclaredValue" action="{!updateDeclaredValue}" immediate="true" reRender="socontainer_value__c">
            <apex:param name="declaredValue" value=""/>
        </apex:actionFunction>
        <apex:actionFunction name="updateDivision" action="{!updateDivision}" immediate="true" 
            reRender="socontainer_socontype__c,socontainer_tarewt__c,socontainer_grosswt__c"
            oncomplete="closeTopDialog();">
            <apex:param name="divId" value=""/>
        </apex:actionFunction>
        <apex:actionFunction name="updateCarrier" action="{!updateCarrier}" immediate="true" reRender="socontainer_shipvia__c">
            <apex:param name="carrierId" value=""/>
        </apex:actionFunction>
        <apex:actionFunction name="updateShipVia" action="{!updateShipVia}" immediate="true" reRender="socontainer_sycarrier__c">
            <apex:param name="shipViaId" value=""/>
        </apex:actionFunction>
        <apex:actionFunction name="setCurrentSoContainelId" action="{!setCurrentSoContainelId}" reRender="socontainelId" oncomplete="serialGrid_reset();showDialog('serialGridPopup');" immediate="true">
            <apex:param name="firstParam" assignTo="{!socontainelId}" value="" />
        </apex:actionFunction> 
        
        <script>
            var commentElementSelected;
            var socontainelIdFetched = "{!socontainelId}";
            var isRootDox = {!isRootDox};// RSTK-1274
            var templateName = '{!templateName}';
            function setCurrentSoContainelIdPre(socontainelId) {
                socontainelIdFetched = socontainelId;
                setCurrentSoContainelId(socontainelId);    
            }
            
            
            function getSourceElement(e)
            {
                var el;
                if (e == null) { el = window.event.srcElement; } else { el=e.target; }
                return el;
            }
            
            function getSelectedValue(e)
            {
                var srcEl = getSourceElement(e);
                return (srcEl != null)?srcEl.value:null;
            }
            
            function getSelectedText(e)
            {
                var srcEl = getSourceElement(e);
                return (srcEl != null)?srcEl.text:null;
            }
            
            
            /**
             * escapeId
             * 
             * The Visualforce Ids contain characters in the ID that are used by jQuery for navigation, need to escape them first.
             */ 
            function escapeId(theId)
            {
                return theId.replace(/(:|\.)/g,'\\\\$1');
            }
            
            var _topDialog = null;
            var _openDialog = null;
            
            function closeDialog()
            {
                if (_openDialog !=  null)
                {
                    _openDialog.unbind('keypress');
                    _openDialog.hide();
                    _openDialog = null;
                }
            }
            
            function showTopDialog(forId)
            {
                var jel = jQuery('#'+escapeId(forId));
                _topDialog = jel;
                var theWin=jQuery(window);
                jel.show();
                var thePopup=jel.find('.topPopup');
                thePopup.offset({
                    top  : 100 + theWin.scrollTop(),
                    left  : (theWin.width() - thePopup.width()) / 2,
                });
            }
            function closeTopDialog()
            {
                if (_topDialog !=  null)
                {
                    _topDialog.hide();
                    _topDialog = null;
                }
            }
            
            function fixupDialog()
            {
                if (_openDialog !=  null)
                {
                    var headers = _openDialog.find('.pbSubheader:first');
                    headers.addClass('first');
                }
            }
            
            function showDialog(forId, width)
            {
                var jel = jQuery('#'+escapeId(forId));
                
                // Need to show the dialog before the offeset can be changed
                jel.show();
                _openDialog = jel;
                var thePopup=jel.find('.modalPopup');
                var theWin=jQuery(window);
                if (width != null)
                {
                    thePopup.width(width);
                }
                
                thePopup.css('max-height',theWin.height()*3/4);

                thePopup.offset({
                    top  : 100 + theWin.scrollTop(),
                    left  : (theWin.width() - thePopup.width()) / 2,
                });
                
                fixupDialog();

                jel.find('[tabindex]:first').focus();
                jel.keypress(function(e) {
                    if (e.which == 13) // return key pressed
                    {
                        if (!(getSourceElement(e) instanceof HTMLTextAreaElement))
                        {
                            // treat as close request unless it's a TextArea
                            e.preventDefault();
                            closeDialog();
                        }
                    }
                });
            }
            var saveAction = null;
            var savedBlockUI = null;
            var savedSaveAndNew = null;
            function doConfirmThenPageSave(actionFunction, blockuiMessage, saveAndNew)
            {
                saveAction = actionFunction;
                savedBlockUI = blockuiMessage;
                savedSaveAndNew = saveAndNew;
                showDialog('confirmDeletions');
            }
            
            function confirmedPageSave()
            {
                removeFieldLocaleFormatting();
                doPageSave(saveAction, savedBlockUI, savedSaveAndNew);
            }

            function getSelectedFloat(e)
            {
            return removeLocaleFormatting(getSelectedValue(e));
            }

            function removeFieldLocaleFormatting() {
                jQuery(".localeTextField").each(function() {
                    var newValue = parseLocaleFloat(this.value);
                    this.value = newValue;
                });
                qa_removeLocaleFormat();
            }

            function restoreFieldLocaleFormatting() {
                jQuery(".localeTextField").each(function() {
                    var newValue = parseFloat(this.value);
                    this.value = formatLocaleFloat(newValue, 2);
                });
                qa_restoreLocaleFormat();
            }

            function removeFormattingAndPageSave() {
                removeFieldLocaleFormatting();
                doPageSave();
            } 
        </script>
                
        <apex:pageBlock id="pb" mode="detail">
            <apex:pageBlockButtons >
                <apex:commandButton onclick="{!IF(c.rstk__socontainer_packslip__c==null,'removeFormattingAndPageSave','doConfirmThenPageSave')}();return false;"
                  value="{!$Label.rstk__socontainer_pagebtn_save}" rendered="{!isEditable}" style="width:50px"/>
                <apex:commandButton onclick="{!IF(c.rstk__socontainer_packslip__c==null,'removeFieldLocaleFormatting','doConfirmThenPageSave')}(null, null, 'true');return false;"
                  value="{!$Label.rstk__socontainer_pagebtn_savenew}" rendered="{!isEditable}" style="width:80px"/>
                  <c:standardButtons cntr="{!controller}" disableSave="true" disableCancel="true"/>
                  <apex:commandButton onclick="doOverCancel();return false;"
                     value="{!$Label.rstk__so_pagebtn_cancel}" rendered="{!isEditable}" style="width:50px"/> 
                  <apex:commandButton value="{!$Label.rstk__pagebtn_socontainer_packingslip}" immediate="false" action="{!packingSlip}" disabled="{!isEditable}" onclick="removeFieldLocaleFormatting(); showTopDialog('pleaseWaitPopup');" 
                        rerender="openscripts,socontainer_packslip__c" oncomplete="restoreFieldLocaleFormatting(); closeTopDialog(); openPackingSlip();"/>
               <apex:commandButton value="{!$Label.rstk__pagebtn_socontainer_billoflading}" immediate="false" action="{!billofLading}" disabled="{!isEditable}" onclick="removeFieldLocaleFormatting(); showTopDialog('pleaseWaitPopup');"
                        rerender="openscripts,socontainer_sobol__c" oncomplete="restoreFieldLocaleFormatting(); closeTopDialog(); openBOL();"/>
               <input type="button" class="btn" value="{!$Label.pagebtn_socontainer_ChildContainers}" onclick="showDialog('childContainersPopup');"/>
            <apex:outputPanel id="openscripts">
            <script>
            	var templateOverride = {!templateOverride};
            	 function openPackingSlip()
                 {
                 	if (templateOverride) {
                       if (templateName) {
                           jQuery('select[id$=selected_template__c]').val(templateName);
                       }
                       _showDialog('selectEmailTemplate');
                       return false;
                   } else {
                  	if(isRootDox){
                  		if(!templateName || templateName == ''){
	                  			alert("{!$Label.NoPackingSlipEmailTempDefined}");
	                  			return false;
	                  		}else{
	                  			window.open('/apex/printDOX?oid={!c.rstk__socontainer_packslip__c}&t={!templateName}');
	                  		}
	                  	}else{
	                  		window.open("/apex/sopackprint?Id={!c.rstk__socontainer_packslip__c}", "{!f.rstk__socontainer_packslip__c.label}");
	                  	}
              		}
                 }
                 function openBOL()
                 {
                   window.open("/{!c.rstk__socontainer_sobol__c}", "{!f.rstk__socontainer_sobol__c.label}");
                 }
                  
                function template_ok() {
                    var packTemplate = jQuery('select[id$=selected_template__c]').val();
                    // RSTK-1274
                    if(isRootDox){
                    	window.open('/apex/printDOX?oid={!c.rstk__socontainer_packslip__c}' 
                        + (packTemplate != '' ? '&t=' + packTemplate :''), "{!f.rstk__socontainer_packslip__c.label}");
                    }else{
                    	window.open('/apex/sopackprint?id={!c.rstk__socontainer_packslip__c}' 
                        + (packTemplate != '' ? '&t=' + packTemplate :''), "{!f.rstk__socontainer_packslip__c.label}");
                    }
                }
            </script>
            </apex:outputPanel>
          </apex:pageBlockButtons>

            <apex:outputPanel style="display:none" />
        
            <apex:pageBlockSection id="pbs_Main" showHeader="false" title="{!$Label.rstk__information}" columns="2" >
              
               <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_div__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_div__c.label}"/>
                    <apex:outputPanel >
                        <!--  c:selectList id="socontainer_div__c" required="true" cntr="{!controller}" options="{!SalesDivisions}" width="300px"  tabIndex="1" 
                          onchange="showTopDialog('pleaseWaitPopup'); updateDivision(getSelectedValue(event));" rendered="{!isNew}"/ -->
                        <apex:outputField value="{!c.rstk__socontainer_div__c}"/>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem />
                            
                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_container__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_container__c.label}"/>
                  <apex:outputPanel >
                    <apex:outputField value="{!c.rstk__socontainer_container__c}" rendered="{!!isNew}"/>
                    <apex:outputPanel rendered="{!isNew}">
                      <c:inputField id="socontainer_container__c" required="true" cntr="{!controller}" width="300px" tabIndex="2"/>
                    </apex:outputPanel>
                  </apex:outputPanel>
                </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem id="shipDateItem" helpText="{!f.rstk__socontainer_shipdate__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_shipdate__c.label}"/>
                    <apex:outputField value="{!c.rstk__socontainer_shipdate__c}"/>
                </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_socontype__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_socontype__c.label}"/>
                    <c:selectList id="socontainer_socontype__c" required="true" cntr="{!controller}" options="{!containerTypes}" 
                      onchange="updateContainerTypeTareWeight(getSelectedValue(event));" width="300px" tabIndex="4"/>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_socontainer__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_socontainer__c.label}"/>
                    <c:inputField id="socontainer_socontainer__c" required="false" editable="false" cntr="{!controller}" width="300px" tabIndex="5"/>
                </apex:pageBlockSectionItem>

                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_tracking__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_tracking__c.label}"/>
                    <c:inputField id="socontainer_tracking__c" required="false" cntr="{!controller}" width="300px" tabIndex="6"/>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_sycarrier__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_sycarrier__c.label}"/>
                    <c:selectList id="socontainer_sycarrier__c" cntr="{!controller}" options="{!carriers}" width="300px" tabIndex="7" onchange="updateCarrier(getSelectedValue(event))"/>
                </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_netwt__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_netwt__c.label}"/>
                    <c:inputField id="socontainer_netwt__c" required="false" cntr="{!controller}" onchange="updateNetWeight(getSelectedFloat(event))" width="300px" tabIndex="8"/>
                </apex:pageBlockSectionItem>                
                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_childnetwt__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_childnetwt__c.label}"/>
                    <c:inputField id="socontainer_childnetwt__c" required="false" editable="false" cntr="{!controller}" width="300px"/>
                </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_tarewt__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_tarewt__c.label}"/>
                    <c:inputField id="socontainer_tarewt__c" required="false" cntr="{!controller}" width="300px" onchange="updateTareWeight(getSelectedFloat(event))" tabIndex="10"/>
                </apex:pageBlockSectionItem>                                
                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_childtarewt__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_childtarewt__c.label}"/>
                    <c:inputField id="socontainer_childtarewt__c" required="false" editable="false" cntr="{!controller}" width="300px"/>
                </apex:pageBlockSectionItem>

                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_grosswt__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_grosswt__c.label}"/>
                    <c:inputField id="socontainer_grosswt__c" required="false" editable="false" cntr="{!controller}" width="300px" tabIndex="9"/>
                </apex:pageBlockSectionItem>                
                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_childgrosswt__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_childgrosswt__c.label}"/>
                    <c:inputField id="socontainer_childgrosswt__c" required="false" editable="false" cntr="{!controller}" width="300px"/>
                </apex:pageBlockSectionItem>
				
                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_sumdetailwght__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_sumdetailwght__c.label}"/>
                    <c:inputField id="socontainer_sumdetailwght__c" required="false" editable="false" cntr="{!controller}" width="300px" tabIndex="9"/>
                </apex:pageBlockSectionItem>                
                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_shipvia__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_shipvia__c.label}"/>
                    <c:selectList id="socontainer_shipvia__c" cntr="{!controller}" options="{!shipmethods}" width="300px" tabIndex="10" onchange="updateShipVia(getSelectedValue(event))"/>
                </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_totgrosswt__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_totgrosswt__c.label}"/>
                    <c:inputField id="socontainer_totgrosswt__c" required="false" cntr="{!controller}" width="600px" tabIndex="14" editable="false"/>
                </apex:pageBlockSectionItem>                
                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_fob__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_fob__c.label}"/>
                    <c:selectList id="socontainer_fob__c" cntr="{!controller}" options="{!fobs}" width="300px" tabIndex="11"/>
                </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_desc__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_desc__c.label}"/>
                    <c:inputField id="socontainer_desc__c" required="false" cntr="{!controller}" width="600px" tabIndex="14"/>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_fterms__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_fterms__c.label}"/>
                    <c:selectList id="socontainer_fterms__c" cntr="{!controller}" options="{!freightTerms}" width="300px" tabIndex="13"/>
                </apex:pageBlockSectionItem>

                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_packslip__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_packslip__c.label}"/>
                    <apex:outputField id="socontainer_packslip__c" value="{!c.rstk__socontainer_packslip__c}" style="width:300px"/>
                </apex:pageBlockSectionItem>   
                <apex:pageBlockSectionItem >
                </apex:pageBlockSectionItem>              
                
                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_sobol__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_sobol__c.label}"/>
                    <apex:outputField id="socontainer_sobol__c" value="{!c.rstk__socontainer_sobol__c}" style="width:300px"/>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                </apex:pageBlockSectionItem>
                                
                <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_value__c.inlineHelpText}">
                    <apex:outputLabel value="{!f.rstk__socontainer_value__c.label}"/>
                    <c:inputField id="socontainer_value__c" required="false" cntr="{!controller}" width="300px" onchange="updateValue(getSelectedFloat(event))" tabIndex="14"/>
                </apex:pageBlockSectionItem>
 

            </apex:pageBlockSection>
            
            
            <apex:pageBlockSection id="pbs_Additional" showHeader="true" collapsible="true" title="{!$Label.rstk__pagetab_socontainer_additional}" columns="1">
    <apex:tabPanel switchType="client" selectedTab="address" id="tabPanel">
        <apex:tab label="{!$Label.rstk__pagetab_socontainer_address}" name="address" id="address">
        
        
               <!-- div id="addressPopup" style="display:none">
                    <apex:outputPanel styleClass="popupBackground" layout="block"/>
                    <apex:outputPanel styleClass="modalPopup" -->
                        <apex:pageBlockSection showHeader="false" collapsible="false" title="{!$Label.rstk__address}" columns="2">
                            <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_address1__c.inlineHelpText}">
                                <apex:outputLabel value="{!f.rstk__socontainer_address1__c.label}"/>
                                <c:inputField id="socontainer_address1__c" cntr="{!controller}" tabIndex="21"/>
                            </apex:pageBlockSectionItem>
                            <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_name__c.inlineHelpText}">
                                <apex:outputLabel value="{!f.rstk__socontainer_name__c.label}"/>
                                <c:inputField id="socontainer_name__c" cntr="{!controller}" tabIndex="27"/>
                            </apex:pageBlockSectionItem>

                            <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_address2__c.inlineHelpText}">
                                <apex:outputLabel value="{!f.rstk__socontainer_address2__c.label}"/>
                                <c:inputField id="socontainer_address2__c" cntr="{!controller}" tabIndex="22"/>
                            </apex:pageBlockSectionItem>
                            <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_phone__c.inlineHelpText}">
                                <apex:outputLabel value="{!f.rstk__socontainer_phone__c.label}"/>
                                <c:inputField id="socontainer_phone__c" cntr="{!controller}" tabIndex="28"/>
                            </apex:pageBlockSectionItem>

                            <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_address3__c.inlineHelpText}">
                                <apex:outputLabel value="{!f.rstk__socontainer_address3__c.label}"/>
                                <c:inputField id="socontainer_address3__c" cntr="{!controller}" tabIndex="23"/>
                            </apex:pageBlockSectionItem>
                            <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_fax__c.inlineHelpText}">
                                <apex:outputLabel value="{!f.rstk__socontainer_fax__c.label}"/>
                                <c:inputField id="socontainer_fax__c" cntr="{!controller}" tabIndex="29"/>
                            </apex:pageBlockSectionItem>

                            <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_city__c.inlineHelpText}">
                                <apex:outputLabel value="{!f.rstk__socontainer_city__c.label}"/>
                                <c:inputField id="socontainer_city__c" cntr="{!controller}" tabIndex="24"/>
                            </apex:pageBlockSectionItem>
                            <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_email__c.inlineHelpText}">
                                <apex:outputLabel value="{!f.rstk__socontainer_email__c.label}"/>
                                <c:inputField id="socontainer_email__c" cntr="{!controller}" tabIndex="30"/>
                            </apex:pageBlockSectionItem>

                            <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_state__c.inlineHelpText}">
                                <apex:outputLabel value="{!f.rstk__socontainer_state__c.label}"/>
                                <c:inputField id="socontainer_state__c" cntr="{!controller}" tabIndex="25"/>
                            </apex:pageBlockSectionItem>

                            <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_country__c.inlineHelpText}">
                                <apex:outputLabel value="{!f.rstk__socontainer_country__c.label}"/>
                                <apex:panelGrid columns="2">
                                	<c:inputField id="socontainer_country__c" cntr="{!controller}" tabIndex="31"/>
                                    <!--c:inputField id="socontainer_isocountry__c" cntr="{!controller}" onchange="isocountryChanged();"/-->
                                    <apex:inputField id="socontainer_isocountry__c" value="{!c.rstk__socontainer_isocountry__c}" rendered="{!!isView}" onchange="isocountryChanged();"/>
                                </apex:panelGrid>    
                            </apex:pageBlockSectionItem>

                            <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_zip__c.inlineHelpText}">
                                <apex:outputLabel value="{!f.rstk__socontainer_zip__c.label}"/>
                                <c:inputField id="socontainer_zip__c" cntr="{!controller}" tabIndex="26"/>
                            </apex:pageBlockSectionItem>
                            
                 </apex:pageBlockSection>
                 <!-- apex:pageBlockSection >
                     <input type="button" id="addressPoppup_ok" class="btn" value="Ok" onclick="closeDialog();"  tabIndex="32"/>
                 </apex:pageBlockSection>
                 </apex:outputPanel>
             </div -->
       </apex:tab>
        <apex:tab label="{!$Label.rstk__pagetab_socontainer_comments}" name="comments" id="comments">
            
             <!-- div id="commentsPopup" style="display:none">
                 <apex:outputPanel styleClass="popupBackground" layout="block"/>
                 <apex:outputPanel styleClass="modalPopup" -->
                      <apex:pageBlockSection showHeader="false" collapsible="false" title="{!f.rstk__socontainer_comments__c.label}" columns="1">
                        <apex:pageBlockSectionItem helpText="{!f.rstk__socontainer_comments__c.inlineHelpText}">
                            <c:inputTextarea rows="12" cntr="{!controller}" cols="0" width="100%" id="socontainer_comments__c" tabIndex="41"/>
                        </apex:pageBlockSectionItem>
                      </apex:pageBlockSection>
                 <!--  apex:pageBlockSection >
                     <input type="button" class="btn" value="Ok" onclick="closeDialog();" tabIndex="42"/>
                 </apex:pageBlockSection>
                 </apex:outputPanel>
             </div -->
</apex:tab>
   </apex:tabPanel>

            <!-- apex:pageBlockSection id="pbs_Additional" showHeader="true" collapsible="true" title="{!$Label.rstk__pagetab_socontainer_additional}" columns="1">
              <apex:pageBlockSectionItem >
              <apex:outputPanel >
               <input type="button" class="btn" value="Address" onclick="showDialog('addressPopup');"/>
               <input type="button" class="btn" value="Comments" onclick="showDialog('commentsPopup');"/>
              </apex:outputPanel>
              </apex:pageBlockSectionItem -->
            </apex:pageBlockSection>

            <apex:pageBlockSection id="pbs_containerDetail" showHeader="true" collapsible="false" title="{!$Label.rstk__pagetab_socontainer_containerdetail}" columns="1">
                <apex:outputPanel rendered="{!isEditableEx}">
                    <input type="button" class="btn" value="{!$Label.socontainer_Add}" onclick="cd_addRow(false)" />
                    <input type="button" class="btn" id="cd_quickDetailAdd" value="{!$Label.Quick_Detail_Add}" onclick="cd_quickAddDetails();" />
                    <input type="button" class="btn" id="cd_removeSelected" value="{!$Label.Remove_Selected}" onclick="cd_deleteSelectedRows()" />
                    <input type="button" class="btn" id="cd_undoDelete" value="{!$Label.Undo_Deleted}" onclick="cd_undoDeleted()" />
                </apex:outputPanel>

<apex:actionRegion >
<!-- ======================================================================
     <<<<<<< CONTAINER DETAIL TABLE
     ====================================================================== -->      
                <apex:pageBlockTable id="containerDetails" value="{!detailsSummary}" var="d">
                    <apex:column headerValue="" rendered="{!isEditableEx}">
                        <apex:facet name="header">
                           <a href="#" onclick="cd_selectAll(); return false;">{!$Label.rstk__soship_sel}</a> 
                        </apex:facet>
                        <input style="margin-left: auto;margin-right: auto;" type="checkbox" id="rowSelected" onchange="cd_enableOptionalButtons()"/>
                    </apex:column>
                    <apex:column headerValue="{!f_el.rstk__socontainel_soshipline__c.label}">
                        <apex:inputHidden id="idx" value="{!d.idx}"/>
                        <apex:inputHidden id="state" value="{!d.state}"/>
                        <apex:inputHidden id="shipperId" value="{!d.shipperId}"/>                        
                        <!--c:largeSelectList id="shipperLine" useValue="true" value="{!d.shipperLineId}" cntr="{!controller}" options="{!shipperLines}" onchange="cd_shipperChanged(event)" rendered="{!AND(isEditableEx,OR(d.state == ITState_INACTIVE || d.state == ITState_ADDED))}"/-->
                        <apex:outputPanel rendered="{!AND(isEditableEx,OR(d.state == ITState_INACTIVE || d.state == ITState_ADDED))}" >
                            <apex:inputText id="soshipdmd_line__c_autocomplete" styleClass="ac_input" tabindex="10" value="{!d.shipperLine}" size="40"  /> <!-- {!} --> 
                            <apex:inputText id="soshipdmd_line__c" value="{!d.shipperLineId}" style="display:none" onchange="cd_shipperChanged(this)"/>
							<script>autocompleteParms["{!$Component.soshipdmd_line__c}"] = {query:"select soshipdmd_line__c, soshipdmd_line__r.name from soshipdmd__c where (soshipdmd_line__r.soshipline_shipper__r.soship_order__r.sohdr_div__c='{!container.rstk__socontainer_div__c}' or soshipdmd_line__r.soshipline_shipper__r.soship_sorma__r.sorma_div__c='{!container.rstk__socontainer_div__c}')", queryParms:[], codeColumn:"soshipdmd_line__c", descColumn:"soshipdmd_line__r.name"};</script>
                        </apex:outputPanel>                               
                        
                        <apex:outputField id="ro_shipperLine" value="{!d.containel.rstk__socontainel_soshipline__c}" rendered="{!!AND(isEditableEx,OR(d.state == ITState_INACTIVE || d.state == ITState_ADDED))}"/>
                    </apex:column>
                    
                    <apex:column headerValue="{!f_el.rstk__socontainel_soprod__c.label}">
                        <apex:outputText id="product" value="{!d.product}" rendered="{!isEditableEx}"/>
                        <apex:outputField id="ro_product" value="{!d.containel.rstk__socontainel_soprod__c}" rendered="{!!isEditableEx}"/>
                    </apex:column>
                    <apex:column headerValue="{!$Label.rstk__productitem}">
                        <apex:outputPanel rendered="{!isEditableEx}">
                            <apex:outputText id="productItem" value="{!d.productItem}" rendered="{!ISNULL(d.shipDmdProducts)}"/>
                            <apex:selectList id="productItemSelect" value="{!d.shipperDemandId}" size="1" multiselect="false" onchange="cd_productItemChanged(event)" rendered="{!!ISNULL(d.shipDmdProducts)}">
                                <apex:selectOptions value="{!d.shipDmdProducts}"/>
                            </apex:selectList>
                        </apex:outputPanel>
                        <apex:outputText id="ro_productItem" value="{!d.productItem}" rendered="{!!isEditableEx}"/>
                    </apex:column>
                    <apex:column headerValue="{!f_el.rstk__socontainel_qty__c.label}">
                        <apex:inputText styleclass="localeTextField" html-decimals="2" style="align:right;" id="quantity" value="{!d.quantitySelected}" onchange="cd_quantityChanged(event)" rendered="{!isEditableEx}"/>
                        <apex:inputHidden id="productWeight" value="{!d.productWeight}"/>
                        <apex:outputText html-decimals="2" style="align:right;" id="ro_quantity" value="{!d.quantitySelected}" rendered="{!!isEditableEx}"/>
                    </apex:column>
                    <apex:column headerValue="{!f_el.rstk__socontainel_netwt__c.label}">
                        <apex:inputText styleclass="localeTextField" html-decimals="2" style="align:right;" id="netWeight" value="{!d.netWeight}" onchange="cd_rowChanged(event, true)" rendered="{!isEditableEx}"/>
                        <apex:outputText html-decimals="2" style="align:right;" id="ro_netWeight" value="{!d.netWeight}" rendered="{!!isEditableEx}"/>
                    </apex:column>
                    <apex:column headerValue="{!f_el.rstk__socontainel_tarewt__c.label}">
                        <apex:inputText styleclass="localeTextField" html-decimals="2" style="align:right;" id="tareWeight" value="{!d.tareWeight}" onchange="cd_rowChanged(event, true)" rendered="{!isEditableEx}"/>
                        <apex:outputText html-decimals="2" style="align:right;" id="ro_tareWeight" value="{!d.tareWeight}" rendered="{!!isEditableEx}"/>
                    </apex:column>
                    <apex:column headerValue="">
                       <apex:outputPanel id="tableCommentsPopup" style="display:none">
                             <apex:outputPanel styleClass="popupBackground" layout="block"/>
                             <apex:outputPanel styleClass="modalPopup">
                                  <apex:pageBlockSection showHeader="true" collapsible="false" title="{!f_el.rstk__socontainel_comments__c.label}" columns="1">
                                    <apex:inputTextarea rows="10" style="width:95%;" id="comments" value="{!d.comments}" tabIndex="99" onchange="socontainel_comments_changed(event, false)" disabled="{!!isEditableEx}"/>
                                  </apex:pageBlockSection>
                             <apex:pageBlockSection >
                                 <input type="button" class="btn" value="{!$Label.pagebtn_salesorder_Ok}" onclick="closeDialog();"/>
                             </apex:pageBlockSection>
                             </apex:outputPanel>
                       </apex:outputPanel>
                       <!--apex:outputPanel id="tableSerialNumbersPopup" style="display:none">
                             <apex:outputPanel styleClass="popupBackground" layout="block"/>
                             <apex:outputPanel styleClass="modalPopup">
                                  <apex:pageBlockSection showHeader="true" collapsible="false" title="{!$Label.rstk__pagetab_socontainer_serialnumbers}" columns="2">
                                        <apex:repeat value="{!d.serialNumbers}" var="snum">
                                            <apex:pageBlockSection >
                                                    <apex:outputText value="{!snum}"/>
                                            </apex:pageBlockSection>
                                        </apex:repeat>
                                  </apex:pageBlockSection>
                             <apex:pageBlockSection >
                                 <input type="button" class="btn" value="{!$Label.pagebtn_salesorder_Ok}" onclick="closeDialog();" tabindex="99"/>
                             </apex:pageBlockSection>
                             </apex:outputPanel>
                       </apex:outputPanel-->                       
                       <input type="button" class="btn" value="{!$Label.pagetab_salesorder_Comments}" onclick="populateCoomentelement(this,'{!$Component.tableCommentsPopup}');"/>
                       <input type="button" class="btn" value="{!$Label.Serial_Numbers}" onclick="showTopDialog('pleaseWaitPopup');setCurrentSoContainelIdPre('{!d.containel.Id}');"/>
                    </apex:column>
                </apex:pageBlockTable>
<!-- ======================================================================
     CONTAINER DETAIL TABLE >>>>>>>
     ====================================================================== -->      

             <apex:actionFunction name="cd_save" action="{!addRowChunks}" immediate="false" reRender="containerDetails" oncomplete="cd_saveAndRun(null)">
                <apex:param name="numOf" value="0"/>
             </apex:actionFunction>
             <apex:actionFunction name="cd_addRowChunk" action="{!addRowChunks}" immediate="false" reRender="containerDetails" oncomplete="cd_addRow(true)">
                <apex:param name="numOf" value=""/>
             </apex:actionFunction>
             <apex:actionFunction name="cd_addRowChunkForResults" action="{!addRowChunks}" immediate="false" reRender="containerDetails" oncomplete="cd_addResults()">
                <apex:param name="numOf" value=""/>
             </apex:actionFunction>
             <apex:actionFunction name="updateForShipper" action="{!updateForShipper}" rerender="containerDetails" immediate="false" oncomplete="cd_postUpdateRows();setupAutocomplete();">
                <apex:param name="idx" value="-1"/>
             </apex:actionFunction>
             <apex:actionFunction name="updateForProductItem" action="{!updateForProductItem}" rerender="containerDetails" immediate="false" oncomplete="cd_postUpdateRows()">
                <apex:param name="idx" value="-1"/>
             </apex:actionFunction>
 </apex:actionRegion>
             </apex:pageBlockSection>


<!-- ======================================================================
     <<<<<<< QUICK ADD DETAILS
     ====================================================================== -->      
           <apex:outputPanel rendered="{!isEditableEx}">
              <div id="quickDetailAddPopup" style="display:none">
                 <apex:outputPanel styleClass="popupBackground" layout="block"/>
                 <apex:outputPanel styleClass="modalPopup">
<apex:actionRegion >
                <apex:actionFunction name="searchShipperDetails" action="{!searchShipperDetails}" rerender="shipperDetails" immediate="false" oncomplete="formatLocaleOutputFields(); closeTopDialog()">
                  <apex:param name="idx" value="-1"/>
                </apex:actionFunction>
                <apex:pageBlockSection showHeader="true" collapsible="false" title="{!$Label.rstk__pagetab_socontainer_shippingcontainerquickdetailadd}" columns="2">
                            <apex:pageBlockSectionItem >
                                <apex:outputLabel value="{!$Label.rstk__productnumber}"/>
                                <apex:outputPanel >
                                    
<!--RCB: 11859 changed prod and cust to autocomplete-->
                                <c:autocomplete id="soprodid__c" cntr="{!controller}" slDesc="{!prodname}"
                                     objKey="soprodidfld" ref="soprod__c"
                                     minChars="{!prodMinCharForAutoComplete}"
                                     query="select id, name from soprod__c where soprod_div__c='{!container.rstk__socontainer_div__c}'" width="250px" tabIndex="1"/> 
                                    <option> </option>
                                </apex:outputPanel>
                            </apex:pageBlockSectionItem>
                            <apex:pageBlockSectionItem />
                            
                            <apex:pageBlockSectionItem >
                                <apex:outputLabel value="{!f_soship.rstk__soship_custno__c.label}"/>
                                <apex:outputPanel >
                                <c:autocomplete id="socontainer_socust__c" cntr="{!controller}" slDesc="{!custname}" 
                                    query="select id, name from socust__c where socust_inactive__c = false" width="250px" tabIndex="1"/>
                                </apex:outputPanel>
                            </apex:pageBlockSectionItem>
                            
                            <apex:pageBlockSectionItem />

                            <apex:pageBlockSectionItem >
                                <apex:outputLabel value="{!f_soship.rstk__soship_order__c.label}"/>
                                <c:Lookup id="sonumber" keyPrefix="{!$ObjectType.rstk__sohdr__c.KeyPrefix}" valueId="{!qasearch.sonumber}" title="{!$Label.rstk__salesorderlookup}" tabIndex="103"/>
                            </apex:pageBlockSectionItem>

                            <apex:pageBlockSectionItem >
                                <input type="button" class="btn" value="{!$Label.Display_Shipper_Details}" 
                                  onclick= "showTopDialog('pleaseWaitPopup'); searchShipperDetails()"/> 
                            </apex:pageBlockSectionItem>
                </apex:pageBlockSection>
</apex:actionRegion>

              <apex:outputPanel id="shipperDetails">
<apex:actionRegion >
                <apex:actionFunction name="addSelectedResults" action="{!addSelectedResults}" rerender="containerDetails" immediate="false" oncomplete="cd_hideInactiveRows(); qa_restoreLocaleFormat(); restoreFieldLocaleFormatting();closeDialog(); closeTopDialog()"/>

                <apex:pageBlockSection id="pbsqa" showHeader="false" collapsible="false" title="{!$Label.rstk__shipperdetails}" columns="1"> <!-- rendered="{!shipperDetailResultsExist}" -->
                <apex:pageBlockTable id="shipperDetailsTable" value="{!shipperDetailResults}" var="d">
                    <apex:column >
                        <apex:facet name="header">
                           <a href="#" onclick="qa_selectAll(); return false;">{!$Label.rstk__soship_sel}</a> 
                        </apex:facet>
                        <apex:inputCheckbox id="rowSelected" value="{!d.selected}"/>
                        <apex:inputHidden id="idx" value="{!d.idx}"/>
                    </apex:column>
                    <apex:column headerValue="{!$Label.rstk__qtyinthiscontainer}">
                        <apex:inputText styleclass="qalocaleTextField" html-decimals="2" id="quantitySelected" value="{!d.quantitySelected}" onchange="qa_quantityChanged(event)"/>
                    </apex:column>
                    <apex:column headerValue="{!$Label.rstk__salesorder}">
                        <apex:outputField value="{!d.ro_shipper.rstk__soship_order__c}"/>
                    </apex:column>
                    <apex:column headerValue="{!$Label.rstk__shipper}">
                        <apex:outputField value="{!d.ro_shipLine.rstk__soshipline_shipper__c}"/>
                    </apex:column>
                    <apex:column headerValue="{!f_el.rstk__socontainel_soshipline__c.label}">
                        <apex:outputField value="{!d.shipDmd.rstk__soshipdmd_line__c}"/>
                    </apex:column>
                    <apex:column headerValue="{!f_soship.rstk__soship_custno__c.label}">
                        <apex:outputField value="{!d.ro_shipper.rstk__soship_custno__c}"/>
                    </apex:column>
                    <apex:column headerValue="{!f_el.rstk__socontainel_soprod__c.label}">
                        <apex:outputField value="{!d.ro_shipLine.rstk__soshipline_prod__c}"/>
                    </apex:column>
                    <apex:column headerValue="{!$Label.rstk__productitem}">
                        <apex:outputText value="{!d.productItem}" rendered="{!isEditableEx}"/>
                    </apex:column>
                    <apex:column headerValue="{!$Label.rstk__shipperquantity}">
                        <apex:outputField value="{!d.shipDmd.rstk__soshipdmd_qtypackage__c}"/>
                        <apex:inputHidden id="maxQuantity" value="{!d.maxQuantity}"/>
                    </apex:column>

                </apex:pageBlockTable>
                 </apex:pageBlockSection>
</apex:actionRegion>                      
                 <apex:pageBlockSection columns="1">
                  <apex:outputPanel >
                     <apex:outputPanel rendered="{!shipperDetailResultsExist}">
                         <input type="button" class="btn" value="{!$Label.Create_Container_Detail}" onclick="qa_removeLocaleFormat(); showTopDialog('pleaseWaitPopup'); addSelectedResults();" tabIndex="104"/>
                     </apex:outputPanel>
                     <input type="button" class="btn" value="{!$Label.rstk__so_pagebtn_cancel}" onclick="closeDialog();" tabIndex="105"/>
                  </apex:outputPanel>
                 </apex:pageBlockSection>
                </apex:outputPanel>
               </apex:outputPanel>
            </div>            
           </apex:outputPanel>     
<!-- ======================================================================
     QUICK ADD DETAILS >>>>>>>
     ====================================================================== -->    
    

<!-- ======================================================================
     <<<<<<< CHILD CONTAINERS
     ====================================================================== -->      
           <apex:outputPanel >
              <div id="childContainersPopup" style="display:none">
                 <apex:outputPanel styleClass="popupBackground" layout="block"/>
                 <apex:outputPanel styleClass="modalPopup">
             
                <apex:pageBlockSection id="ccpb" showHeader="true" collapsible="false" title="{!$Label.rstk__pagetab_socontainer_childcontainers}" columns="1">
                            <apex:pageBlockSectionItem id="ccpbs" rendered="{!isEditableEx}">
                                <apex:outputLabel value="{!$Label.rstk__availablecontainers}"/>
                                <apex:outputPanel >
                        			<table border="0"><tr><td>
                        			  <c:largeSelectList id="nonAllocatedContainers" useValue="true" value="" cntr="{!controller}" options="{!nonAllocatedContainerOptions}" />
                                    </td><td>
                                      <input type="button" class="btn" id="addChildContainerButton" value="{!$Label.socontainer_Add}" onclick="cc_addChildContainer();"/>
                                      <input type="button" class="btn" id="cc_removeSelected" value="{!$Label.Remove_Selected}" style="display:none;" onclick="cc_deleteSelectedRows()"/>
                                      <input type="button" class="btn" id="cc_undoDelete" value="{!$Label.Undo_Deleted}" style="display:none;" onclick="cc_undoDeleted()"/>
                                    </td></tr></table>
                               </apex:outputPanel>
                            </apex:pageBlockSectionItem>
                </apex:pageBlockSection>

              <apex:outputPanel id="childContainers">
<apex:actionRegion >
             <apex:actionFunction name="cc_addRowChunk" action="{!childContainer_addRowChunks}" immediate="false" reRender="childContainers" oncomplete="cc_addRow(true)">
                <apex:param name="numOf" value=""/>
             </apex:actionFunction>

                <apex:pageBlockTable id="childContainerTable" value="{!childContainers}" var="cc">
                    <apex:column headerValue="" rendered="{!isEditableEx}">
                        <apex:facet name="header">
                           <a href="#" onclick="cc_selectAll(); return false;">{!$Label.rstk__soship_sel}</a> 
                        </apex:facet>
                        <input type="checkbox" id="rowSelected" onchange="cc_enableOptionalButtons()"/>
                    </apex:column>
                    <apex:column headerValue="{!f.name.label}">
                        <apex:inputHidden id="idx" value="{!cc.idx}"/>
                        <apex:inputHidden id="state" value="{!cc.state}"/>
                        <apex:inputHidden id="id" value="{!cc.id}"/>
                        <apex:inputHidden id="name" value="{!cc.name}"/>
                        <apex:outputText id="namero" value="{!cc.name}" rendered="{!isEditableEx}"/>
                        <c:ObjectLink id="linkname" valueName="{!cc.name}" valueId="{!cc.id}" rendered="{!!isEditableEx}"/>
                    </apex:column>
                 </apex:pageBlockTable>
</apex:actionRegion> 
                     
                 <apex:pageBlockSection columns="1">
                  <apex:outputPanel >
                      <input type="button" class="btn" value="{!$Label.pagebtn_salesorder_Ok}" onclick="closeDialog();" tabIndex="202"/>
                  </apex:outputPanel>
                 </apex:pageBlockSection>
                </apex:outputPanel>
               </apex:outputPanel>
            </div>            
           </apex:outputPanel>     
<!-- ======================================================================
     CHILD CONTAINERS >>>>>>>
     ====================================================================== -->    
    
<!-- ======================================================================
     <<<<<<< CONFIRM DELETIONS
     ====================================================================== -->      
           <apex:outputPanel >
              <div id="confirmDeletions" style="display:none">
                 <apex:outputPanel styleClass="popupBackground" layout="block"/>
                 <apex:outputPanel styleClass="modalPopup">
                    <apex:pageBlockSection showHeader="true" collapsible="false" title="{!$Label.rstk__pagetab_socontainer_confirmdeletion}" columns="1">

                            <apex:pageBlockSectionItem >
                                <apex:outputPanel >
                                       {!$Label.rstk__the_existing_packing_slip_may_now_contain_out_of_date_information_please_confir}
                                </apex:outputPanel>
                            </apex:pageBlockSectionItem>
                           <apex:pageBlockSectionItem >
                               <apex:outputLabel value="{!$Label.rstk__deletepackingslip}"/>
                               <apex:inputCheckbox value="{!deletePackingSlip}"/>
                            </apex:pageBlockSectionItem>


                            <apex:pageBlockSectionItem >
                              <apex:outputPanel >

                                    <input type="button" class="btn" value="{!$Label.purchord_pagebtn_OK}" onclick="closeDialog();confirmedPageSave();"/>
                                    <input type="button" class="btn" value="{!$Label.pagebtn_salesorder_Cancel}" onclick="closeDialog()"/>
                             </apex:outputPanel>
                            </apex:pageBlockSectionItem>
                        </apex:pageBlockSection>

                 </apex:outputPanel>     
              </div>            
           </apex:outputPanel>     
<!-- ======================================================================
     CONFIRM DELETIONS >>>>>>>
     ====================================================================== -->    

<!-- ======================================================================
     <<<<<<< SHIP CONTAINERS
     ====================================================================== -->      
           <apex:outputPanel rendered="{!!isEditableEx}">
              <div id="shipContainersPopup" style="display:none">
                 <apex:outputPanel styleClass="popupBackground" layout="block"/>
                 <apex:outputPanel styleClass="modalPopup">
                 <apex:actionFunction name="sh_shipContainers" action="{!shipContainers}" immediate="true" reRender="sh_infoBlock,pbs_Main" oncomplete="closeTopDialog();"/>
                 <apex:actionFunction name="sh_shipContainersReset" action="{!shipContainersReset}" immediate="true" reRender="sh_infoBlock" oncomplete="fixupDialog();closeTopDialog();"/>
                    <apex:pageBlockSection showHeader="true" collapsible="false" title="{!$Label.rstk__pagetab_socontainer_shipcontainers}" columns="1">
                    <apex:outputPanel id="sh_infoBlock">
                       <apex:pageBlockSection id="shpb" showHeader="false" collapsible="false" title="{!$Label.rstk__pagetab_socontainer_shipcontainers}" columns="1">
                            <apex:pageBlockSectionItem rendered="{!shipContainersStatus.state != SHState_NOTRUN}">
                                <apex:outputLabel value="{!$Label.rstk__results}"/>
                                <apex:outputText value="{!shipContainersStatus.results}"/>
                            </apex:pageBlockSectionItem>

                            <apex:pageBlockSectionItem rendered="{!shipContainersStatus.state == SHState_NOTRUN}">
                                <apex:outputLabel value="{!$Label.rstk__pleaseconfirm}"/>
                                <apex:outputPanel >
                                    <apex:outputPanel rendered="{!ISBLANK(c.rstk__socontainer_shipdate__c)}">
                                       {!$Label.rstk__that_you_wish_to_ship_this_container_which_will_also_perform_the_shipment_functi}
                                    </apex:outputPanel>
                                    <apex:outputPanel rendered="{!!ISBLANK(c.rstk__socontainer_shipdate__c)}">
                                       {!$Label.rstk__that_you_wish_to_reverse_the_shipment_of_this_container_which_will_also_perform}
                                    </apex:outputPanel>
                                </apex:outputPanel>
                            </apex:pageBlockSectionItem>

                            <apex:pageBlockSection id="sh_detailsSection" showHeader="true" collapsible="true" title="{!$Label.rstk__pagetab_socontainer_moredetails}" columns="1" rendered="{!shipContainersStatus.hasLines}">
                                 <script>twistSection(document.getElementById("{!$Component.sh_detailsSection}").childNodes[0].childNodes[0]); </script>
                                <apex:pageBlockTable value="{!shipContainersStatus.lines}" var="d">
                                    <apex:column headerValue="{!$Label.rstk__level}">
                                        <apex:outputText style="font-weight:800;" value="{!d.level}"/>
                                    </apex:column>
                                    <apex:column headerValue="{!$Label.rstk__item}">
                                        <apex:outputText value="{!d.item}"/>
                                    </apex:column>
                                    <apex:column headerValue="{!$Label.rstk__description}">
                                        <apex:outputText value="{!d.description}"/>
                                    </apex:column>
                                </apex:pageBlockTable>
                            </apex:pageBlockSection>


                            <apex:pageBlockSectionItem >
                              <apex:outputPanel >
                                 <apex:outputPanel rendered="{!shipContainersStatus.state != SHState_NOTRUN}">
                                    <input type="button" class="btn" id="sh_reset" value="{!$Label.Reset_Status}" onclick="showTopDialog('pleaseWaitPopup'); sh_shipContainersReset();"/>
                                    <input type="button" class="btn" id="sh_ok" value="{!$Label.pagebtn_soship_Ok}" onclick="closeDialog()"/>
                                 </apex:outputPanel>
                                 <apex:outputPanel rendered="{!shipContainersStatus.state == SHState_NOTRUN}">
                                    <input type="button" class="btn" id="sh_confirmBtn" value="{!$Label.pagebtn_soship_Confirm}" onclick="showTopDialog('pleaseWaitPopup'); sh_shipContainers();"/>
                                    <input type="button" class="btn" id="sh_cancel" value="{!$Label.pagebtn_salesorder_Cancel}" onclick="closeDialog()"/>
                                 </apex:outputPanel>
                             </apex:outputPanel>
                            </apex:pageBlockSectionItem>
                        </apex:pageBlockSection>
                    </apex:outputPanel>     
                   </apex:pageBlockSection>
                 </apex:outputPanel>     
              </div>            
           </apex:outputPanel>     
<!-- ======================================================================
     SHIP CONTAINERS >>>>>>>
     ====================================================================== -->    

			<c:Popup popupId="serialGridPopup" title="{!$Label.rstk__pagetab_socontainer_serialnumbers}" onOk="serialGrid_saveAndClose();">
            	<c:PageableGrid width="880" jsController="serialGrid" data="{!ContainerSerialGrid}" pageSize="15" editable="{!!shipped}" ispopup="true" disableSave="{!shipped}"/>                           
            </c:Popup>	
             <div id="pleaseWaitPopup" style="display:none">
                 <apex:outputPanel styleClass="topPopupBackground" layout="block"/>
                 <apex:outputPanel styleClass="topPopup">
                    <apex:image url="{!$Resource.rstk__busy}"/>
                 </apex:outputPanel>
             </div>
             
             <script>
                var inactiveStates = new Array();
                <apex:repeat value="{!ITInactiveStates}" var="inactiveState">
                    inactiveStates.push("{!inactiveState}");
                </apex:repeat>





                function qa_getTableBody()
                {
                    return jQuery(escapeId("#{!$Component.pbsqa.shipperDetailsTable}:tb"));
                }
                
                function qa_getVisibleRows()
                {
                    var visibleRows = [];
                    
                    qa_getTableBody().children('tr').each(function (index, el) 
                    {
                       visibleRows.push(this);
                    });

                    return visibleRows;
                }
                
                function qa_selectAll()
                {
                    var tableBody = qa_getTableBody();
                    var visibleRows = qa_getVisibleRows();
                    var selected = tableBody.find('input[id$="rowSelected"]:checked');
                    var selectAll = (selected.size() < visibleRows.size());
                    jQuery(visibleRows).each(function (index, el) 
                    {
                    
                        var chkBox = jQuery(this).find("input[id$='rowSelected']");
                        if (selectAll)
                        {
                            chkBox.attr('checked', true);
                        }
                        else
                        {
                            chkBox.removeAttr('checked');
                        } 
                    });
                }

                function qa_quantityChanged(e)
                {
                    var srcEl = getSourceElement(e);
                    if (srcEl != null)
                    {
                        var parentRow = jQuery(srcEl).closest("tr");
                        if (parentRow.size() > 0)
                        {
                            var quantityValue = parseLocaleFloat(jQuery(srcEl).val()) || -1.0;
                            var maxQuantityValue = parseFloat(parentRow.find("input[id$='maxQuantity']").val()) || 0.0;
                            if (quantityValue < 0.0)
                            {
                                jQuery(srcEl).val(formatLocaleFloat(0.0));
                            }
                            if (quantityValue > maxQuantityValue)
                            {
                                alert("{!$Label.MaxSelectableQtyIs0_ResettingToThisVal}", formatLocaleFloat(maxQuantityValue));
                                jQuery(srcEl).val(formatLocaleFloat(maxQuantityValue));
                            }
                        }
                    }
                }
                
                function qa_removeLocaleFormat() {
                    jQuery(".qalocaleTextField").each(function() {
                        var newValue = parseLocaleFloat(this.value);
                        this.value = newValue;
                    });
                }
                
                function qa_restoreLocaleFormat() {
                    jQuery(".qalocaleTextField").each(function() {
                        var newValue = parseFloat(this.value);
                        this.value = formatLocaleFloat(newValue, 2);
                    });
                }
                
                 
                function cc_getTableBody()
                {
                    return jQuery(escapeId("#{!$Component.childContainerTable}:tb"));
                }
                
                function cc_getSelectBox()
                {
                    return jQuery("select[name*=nonAllocatedContainers]");
                }
                
                function cc_hideInactiveRows()
                {
                    cc_getTableBody().children('tr').each(function (index, el) {
                       var stateEl = jQuery(this).find("input[id$='state']");
                        if (inactiveStates.indexOf(jQuery(stateEl).val()) >= 0)
                        {
                          jQuery(this).hide();
                        }
                        else
                        {
                          jQuery(this).show();
                        }
                    });
                }
                
                function cc_enableOptionalButtons()
                {
                    var tableBody= cc_getTableBody();
                    
                    var selected = tableBody.find('input[id$="rowSelected"]:checked');
                    var deleted  = tableBody.find('input[id$="state"][value="{!ITState_DELETED}"],input[id$="state"][value="{!ITState_MODIFIEDDELETED}"]');

                    showButton("cc_removeSelected", (selected.size() > 0));
                    showButton("cc_undoDelete",     (deleted.size() > 0));
                }
                
                var cc_addFn = null;
                function cc_addRow(cleanupTable, onaddFn)
                {
                    var addedRow = false;
                    if (onaddFn != null)
                    {
                      cc_addFn = onaddFn;
                    }
                  
                    cc_getTableBody().children('tr').each(function (index, el) 
                    {
                       var stateEl = jQuery(this).find("input[id$='state']");
                        if (stateEl.val() == "{!ITState_INACTIVE}")
                        {
                            stateEl.val("{!ITState_ADDED}");
                            jQuery(this).show();
                            
                            addedRow = true;
                            
                            if (cleanupTable)
                            {
                                cc_hideInactiveRows();
                                closeTopDialog();
                            }
                            
                            if (cc_addFn != null)
                            {
                              cc_addFn(this);
                              cc_addFn = null;
                            }
                            
                            return false;
                        }
                    });
                    
                    if (!addedRow)
                    {
                        // Need to add another chunk of rows
                        showTopDialog('pleaseWaitPopup');
                        cc_addRowChunk();
                    }
                }

                
                function cc_addChildContainer()
                {
                    var selEl = cc_getSelectBox();
                    var optionEl = selEl.find("option:selected");
                    var selId = selEl.val();
                    var selName = optionEl.text();
                    
                    if (selId != "" && selId != null)
                    {
                        cc_addRow(false, function(newRow)  {
                           var idEl = jQuery(newRow).find("input[id$='id']");
                           var hiddenNameEl = jQuery(newRow).find("input[id$='name']");
                           var nameEl = jQuery(newRow).find("span[id$='namero']");
                           idEl.val(selId);
                           hiddenNameEl.val(selName);
                           nameEl.text(selName);
                           optionEl.remove();
                        });
                    }
                }
                
                function cc_resetRow(row)
                {
                    row.find("input[id$='state']").val("{!ITState_INACTIVE}");
                    row.find("select[id$='id']").val("");
                    row.find("input[id$='name']").val("");
                    row.find("span[id$='namero']").text("");
                }

                function cc_deletedRow(delRow)
                {
                    var selId   = delRow.find("input[id$='id']").val();
                    var selName = delRow.find("input[id$='name']").val();
                     
                    if (selId != "")
                    {
                      var newOption = jQuery("<option/>", { "value":selId, "text":selName });
                      cc_getSelectBox().append(newOption);
                    }
                }


                function cc_deleteSelectedRows()
                {
                    var selected = cc_getTableBody().find('input[id$="rowSelected"]:checked');
                    
                    selected.each(function (index, el) 
                    {
                       var parentRow = jQuery(this).closest("tr");
                       var stateEl   = parentRow.find("input[id$='state']");
                       
                       cc_deletedRow(parentRow);
                       
                       switch (stateEl.val())
                       {
                         case "{!ITState_ACTIVE}":
                             stateEl.val("{!ITState_DELETED}");
                             break;
                             
                         case "{!ITState_MODIFIED}":
                             stateEl.val("{!ITState_MODIFIEDDELETED}");
                             break;
                             
                         default:
                             cc_resetRow(parentRow);
                             break;
                       }
                       
                       jQuery(this).removeAttr("checked");
                    });
                    
                    cc_hideInactiveRows();
                    cc_enableOptionalButtons();
                }

                function cc_undoDeleted()
                {
                    var tableBody= cc_getTableBody();
                    var deleted  = tableBody.find('input[id$="state"][value="{!ITState_DELETED}"]');
                    var modifieddeleted = tableBody.find('input[id$="state"][value="{!ITState_MODIFIEDDELETED}"]');
                    
                    deleted.each(function (index, el) 
                    {
                       var parentRow = jQuery(this).closest("tr");
                       var stateEl   = parentRow.find("input[id$='state']");
                       stateEl.val("{!ITState_ACTIVE}");
                    });

                    modifieddeleted.each(function (index, el) 
                    {
                       var parentRow = jQuery(this).closest("tr");
                       var stateEl   = parentRow.find("input[id$='state']");
                       stateEl.val("{!ITState_MODIFIED}");
                    });
                    
                    cc_hideInactiveRows();
                    cc_enableOptionalButtons();
                }

                function cc_getVisibleRows()
                {
                    var visibleRows = [];
                    
                    cc_getTableBody().children('tr').each(function (index, el) 
                    {
                       var stateEl = jQuery(this).find("input[id$='state']");
                       switch (stateEl.val())
                       {
                           case "{!ITState_ACTIVE}":
                           case "{!ITState_ADDED}":
                           case "{!ITState_MODIFIED}":
                               visibleRows.push(this);
                           break;
                       }
                    });

                    return visibleRows;
                }
                
                function cc_selectAll()
                {
                    var tableBody = cc_getTableBody();
                    var visibleRows = cc_getVisibleRows();
                    var selected = tableBody.find('input[id$="rowSelected"]:checked');
                    var selectAll = (selected.size() < visibleRows.size());
                    jQuery(visibleRows).each(function (index, el) 
                    {
                    
                        var chkBox = jQuery(this).find("input[id$='rowSelected']");
                        if (selectAll)
                        {
                            chkBox.attr('checked', true);
                        }
                        else
                        {
                            chkBox.removeAttr('checked');
                        } 
                    });
                    cc_enableOptionalButtons();
                }

                
                cc_hideInactiveRows();
                cc_enableOptionalButtons();

                












                cd_dirtyFlag = false;
                function cd_isDirty(newValue)
                {
                    if (newValue != null)
                    {
                        cd_dirtyFlag = newValue;
                    }
                    
                    return cd_dirtyFlag;
                }
                
                function cd_getTableBody()
                {
                    return jQuery(escapeId("#{!$Component.pbs_containerDetail.containerDetails}:tb"));
                }
                
                var cd_postSaveFn = null;
                function cd_saveAndRun(postSaveFn)
                {
                  if (postSaveFn == null)
                  {
                    if (cd_postSaveFn != null)
                    {
                      cd_postUpdateRows()
                      closeTopDialog();
                      cd_postSaveFn();
                      cd_postSaveFn = null;
                    }
                  }
                  if (cd_isDirty())
                  {
                        cd_postSaveFn = postSaveFn;
                        showTopDialog('pleaseWaitPopup');
                        cd_isDirty(false);
                        cd_save();
                  }
                  else
                  {
                      postSaveFn();
                  }
                  formatLocaleOutputFields();
                }
                
                function cd_quickAddDetails()
                {
                  showTopDialog('pleaseWaitPopup');
                  closeTopDialog();
                  cd_saveAndRun(function() { showDialog('quickDetailAddPopup', '1000px'); });
                }
                
                function cd_hideInactiveRows()
                {
                    cd_getTableBody().children('tr').each(function (index, el) {
                       var stateEl = jQuery(this).find("input[id$='state']");
                        if (inactiveStates.indexOf(jQuery(stateEl).val()) >= 0)
                        {
                          jQuery(this).hide();
                        }
                        else
                        {
                          jQuery(this).show();
                        }
                    });
                }
                
                function cd_postUpdateRows()
                {
                    closeTopDialog();
                    cd_hideInactiveRows();
                    formatLocaleOutputFields();
                }
                
                function cd_resetRow(row)
                {
                    row.find("input[id$='state']").val("{!ITState_INACTIVE}");
                    row.find("input[id$='soshipdmd_line__c_autocomplete']").removeAttr('value');
                    row.find("input[id$='soshipdmd_line__c']").removeAttr('value');
                    row.find("span[id$='product']").text("");
                    row.find("span[id$='productItem']").text("");
                    row.find("input[id$='quantity']").val(formatLocaleFloat(0.0));
                    row.find("input[id$='netWeight']").val(formatLocaleFloat(0.0));
                    row.find("input[id$='tareWeight']").val(formatLocaleFloat(0.0));
                    row.find("textarea[id$='comments']").val("");
                }
                
                function cd_deleteSelectedRows()
                {
                    var selected = cd_getTableBody().find('input[id$="rowSelected"]:checked');
                    
                    selected.each(function (index, el) 
                    {
                       cd_isDirty(true);
                       var parentRow = jQuery(this).closest("tr");
                       var stateEl   = parentRow.find("input[id$='state']");
                       switch (stateEl.val())
                       {
                         case "{!ITState_ACTIVE}":
                             stateEl.val("{!ITState_DELETED}");
                             break;
                             
                         case "{!ITState_MODIFIED}":
                             stateEl.val("{!ITState_MODIFIEDDELETED}");
                             break;
                             
                         default:
                             cd_resetRow(parentRow);
                             break;
                       }
                       
                       jQuery(this).removeAttr("checked");
                    });
                    
                    cd_hideInactiveRows();
                    cd_enableOptionalButtons();
                }
                
                function cd_getVisibleRows()
                {
                    var visibleRows = [];
                    
                    cd_getTableBody().children('tr').each(function (index, el) 
                    {
                       var stateEl = jQuery(this).find("input[id$='state']");
                       switch (stateEl.val())
                       {
                           case "{!ITState_ACTIVE}":
                           case "{!ITState_ADDED}":
                           case "{!ITState_MODIFIED}":
                               visibleRows.push(this);
                           break;
                       }
                    });

                    return visibleRows;
                }
                
                function cd_selectAll()
                {
                    var tableBody = cd_getTableBody();
                    var visibleRows = cd_getVisibleRows();
                    var selected = tableBody.find('input[id$="rowSelected"]:checked');
                    var selectAll = (selected.size() < visibleRows.size());
                    jQuery(visibleRows).each(function (index, el) 
                    {
                    
                        var chkBox = jQuery(this).find("input[id$='rowSelected']");
                        if (selectAll)
                        {
                            chkBox.attr('checked', true);
                        }
                        else
                        {
                            chkBox.removeAttr('checked');
                        } 
                    });
                    cd_enableOptionalButtons();
                }
                

                function cd_undoDeleted()
                {
                    var tableBody= cd_getTableBody();
                    var deleted  = tableBody.find('input[id$="state"][value="{!ITState_DELETED}"]');
                    var modifieddeleted = tableBody.find('input[id$="state"][value="{!ITState_MODIFIEDDELETED}"]');
                                        
                    deleted.each(function (index, el) 
                    {
                       var parentRow = jQuery(this).closest("tr");
                       var stateEl   = parentRow.find("input[id$='state']");
                       stateEl.val("{!ITState_ACTIVE}");
                       cd_isDirty(true);
                    });

                    modifieddeleted.each(function (index, el) 
                    {
                       var parentRow = jQuery(this).closest("tr");
                       var stateEl   = parentRow.find("input[id$='state']");
                       stateEl.val("{!ITState_MODIFIED}");
                       cd_isDirty(true);
                    });
                    
                                        
                    cd_hideInactiveRows();
                    cd_enableOptionalButtons();
                }
                
                function  cd_rowChanged(e, enforceGEZero)
                {
                    cd_isDirty(true);
                    var srcEl = getSourceElement(e);
                    if (srcEl != null)
                    {
                        if (enforceGEZero == true)
                        {
                            var theValue = parseLocaleFloat(jQuery(srcEl).val()) || -1.0;
                         
                            if (theValue < 0.0)
                            {
                                jQuery(srcEl).val(0.0);
                            }
                        }
                        var parentRow = jQuery(srcEl).closest("tr");
                        if (parentRow.size() > 0)
                        {
                             var stateEl = parentRow.find("input[id$='state']");
                             switch (stateEl.val())
                             {
                                case "{!ITState_ACTIVE}":
                                    stateEl.val("{!ITState_MODIFIED}");
                                    break;
                             
                                case "{!ITState_INACTIVE}":
                                    stateEl.val("{!ITState_ADDED}");
                                    break;
                             }
                        }
                    }
                }
                
                function populateCoomentelement(elemetSelected,popuID) {
                    commentElementSelected = elemetSelected;
                    showDialog(popuID);
                    
                }
                                
                function socontainel_comments_changed(e) {
                	cd_isDirty(true);
                    var srcEl = getSourceElement(e);
                    if (srcEl != null)
                    {
                        var parentRow = jQuery(commentElementSelected).closest("tr");
                        var stateEl = parentRow.find("input[id$='state']");
                        switch (stateEl.val())
                        {
                            case "{!ITState_ACTIVE}":
                                stateEl.val("{!ITState_MODIFIED}");
                                break;
                                
                            case "{!ITState_INACTIVE}":
                                stateEl.val("{!ITState_ADDED}");
                                break;
                        }
                    } 
                    commentElementSelected = '';
                }    
                               
                                
                function cd_quantityChanged(e)
                {
                    cd_rowChanged(e);
                    var srcEl = getSourceElement(e);
                    if (srcEl != null)
                    {
                        var parentRow = jQuery(srcEl).closest("tr");
                        if (parentRow.size() > 0)
                        {
                            var quantityValue = parseLocaleFloat(jQuery(srcEl).val()) || -1.0;
                            var prodWeightValue = parseFloat(parentRow.find("input[id$='productWeight']").val()) || 0.0; // Not a Locale field
                             
                             if (quantityValue < 0.0)
                             {
                                jQuery(srcEl).val(0.0);
                             }
                             else if (prodWeightValue > 0)
                             {
                                 parentRow.find("input[id$='netWeight']").val(quantityValue * prodWeightValue);
                             }
                        }
                    }
                }

    			function cd_shipperChanged(elemnt)    			
                {
                    console.log(' cd_shipperChanged elemnt ',elemnt);                    
                    var idx = jQuery(elemnt).closest('tr').find('input[id$="idx"]');
                    console.log(' cd_shipperChanged idx ',idx);
                    console.log(' cd_shipperChanged idx.val() ',idx.val());
                    var stateEl = jQuery(elemnt).closest('tr').find("input[id$='state']");
                    console.log(' cd_shipperChanged stateEl.val() ',stateEl.val());
                    cd_isDirty(true);
                    switch (stateEl.val())
                    {
                        case "{!ITState_ACTIVE}":
                            stateEl.val("{!ITState_MODIFIED}");
                            break;
                            
                        case "{!ITState_INACTIVE}":
                            stateEl.val("{!ITState_ADDED}");
                            break;
                    }
                    cd_isDirty(false);
                    showTopDialog('pleaseWaitPopup');
                    updateForShipper(idx.val());
                }
                
                function cd_productItemChanged(e)
                {
                    var srcEl = getSourceElement(e);
                    if (srcEl != null)
                    {
                        var idx = jQuery(srcEl).closest('tr').find('input[id$="idx"]');
                        cd_rowChanged(e);
                        cd_isDirty(false);
                        showTopDialog('pleaseWaitPopup');
                        updateForProductItem(idx.val());
                    }
                }
                
                function showButton(buttonId, doShow)
                {
                    var theButton= jQuery("#"+buttonId);
                  
                    if (doShow)
                    {
                        jQuery(theButton).show('fast');
                    }
                    else
                    {
                        jQuery(theButton).hide('fast');
                    }
                }
                
                function cd_enableOptionalButtons()
                {
                    var tableBody= cd_getTableBody();
                    
                    var selected = tableBody.find('input[id$="rowSelected"]:checked');
                    var deleted  = tableBody.find('input[id$="state"][value="{!ITState_DELETED}"],input[id$="state"][value="{!ITState_MODIFIEDDELETED}"]');
                    
                    showButton("cd_removeSelected", (selected.size() > 0));
                    showButton("cd_undoDelete",     (deleted.size() > 0));
                }
                
                function cd_addRow(cleanupTable)
                {
                    cd_isDirty(true);
                    var addedRow = false;
                    cd_getTableBody().children('tr').each(function (index, el) 
                    {
                       var stateEl = jQuery(this).find("input[id$='state']");
                        if (stateEl.val() == "{!ITState_INACTIVE}")
                        {
                            stateEl.val("{!ITState_ADDED}");
                            jQuery(this).show();
                            
                            addedRow = true;
                            
                            if (cleanupTable)
                            {
                                cd_hideInactiveRows();
                                closeTopDialog();
                            }
                            return false;
                        }
                    });
                    
                    if (!addedRow)
                    {
                        // Need to add another chunk of rows
                        showTopDialog('pleaseWaitPopup');
                        cd_addRowChunk();
                    }
                }
                
                function cd_addResults()
                {
                    cd_hideInactiveRows();
                }
                
                cd_hideInactiveRows();
                cd_enableOptionalButtons();

    </script>             
            
            <c:Popup popupId="selectEmailTemplate" title="{!$Label.rstk__pagepopup_soship_selectemailtemplate}" onOk="_closeDialog(); template_ok();">
                    <apex:selectList id="selected_template__c" style="width:300px" multiselect="false" size="1">
                        <apex:selectOptions value="{!EmailTemplates}"/>
                    </apex:selectList>
            </c:Popup>
              
            <apex:tabPanel switchType="client" selectedTab="tab_Custom" id="theTabPanel">
                <apex:tab label="{!customFieldTabName}" name="tab_Custom" id="tab_Custom" rendered="{!hasCustomFields}">
                    <c:customFields cntr="{!controller}" cols="2"/>
                </apex:tab>
                <apex:tab label="{!$Label.rstk__pagetab_socontainer_info}" name="tab_Info" id="tab_Info">
                    <c:infoSection cntr="{!controller}" showHeader="false"/>
                </apex:tab>
            </apex:tabPanel>
        </apex:pageBlock>
    </apex:form>
            
        <!-- apex:outputPanel id="debug">
        <textarea rows='20' cols='200'>{!debug}</textarea>
        </apex:outputPanel -->
        
    <apex:relatedList list="UPS_Shipments__r" rendered="{!packageEnabled.zkUPS}"/>
    <apex:relatedList list="FedEx_Shipments__r" rendered="{!packageEnabled.zkFedEx}"/>
   
    <c:footerInclude cntr="{!controller}" />

    
    <script>
         var ProvideSFContact = "{!$Label.PleaseProvideSFContact}";   
         function isocountryChanged(type, name)
         {
         	var isocountry = sfffGetFieldValue('socontainer_isocountry__c');
         	console.log('isocountry '+isocountry);
            sfffSetFieldValue('socontainer_country__c', isocountry);
                
         } 
                        
         serialGrid.onGridLoad = function() {
             self=this;
             this.getVisibleRows().each(function (index, el) {
                 var row = jQuery(this);
                 //var Ids = self.getRowValue(row, 'Id');
                 //var srlno = self.getRowValue(row, 'socontainser_srlno__c');
                 //console.log(' srlno is '+srlno);
             });
         }                            
         
         serialGrid.onSaveFailed = function(row) {
             unblockUI();
         }
         
         serialGrid.onSaved = function(row) {
             doView();
         }
         
         serialGrid.validate = function() {
         	self = this;
            var isvalid = true;
            var areDuplicateEntries = false;
            var soconatinelId;
            var shipperline; 
            var serialNoArray = [];
            var serialNoArrayStroing = ''; 
            var socontainserCount = 0;
            console.log('socontainelIdFetched '+socontainelIdFetched); 
            this.getVisibleRows().each(function (index, el) {
                var row = jQuery(this);
                var srlno = self.getRowValue(row, 'socontainser_srlno__c');
                socontainserCount++;
                if(soconatinelId == '' || soconatinelId == undefined) {
                    soconatinelId = self.getRowValue(row, 'socontainser_soconatinel__c');
                }    
                
                if(srlno == null || srlno == '') {
                    alert('{!$Label.Please_Enter_Serial_Number}');
                    isvalid = false;
                    return false;
                } else {
                    if(serialNoArray.includes(srlno)) {
                        alert('{!$Label.Duplicate_Serial_Numbers_found_in_same_Container_Detail}');
                    	isvalid = false;
                    	return false;
                    } else {
                        serialNoArrayStroing = serialNoArrayStroing + "'" + srlno + "',";
                    	serialNoArray.push(srlno);       
                    }
                }    
                console.log('FN srlno ',srlno);
            }); 
             
            if(isvalid == true) {
                if((socontainelIdFetched != undefined) && (socontainelIdFetched != '')) {                    
                    serialNoArrayStroing = serialNoArrayStroing.slice(0,serialNoArrayStroing.length  -1);            
                    var socontainels = execQuery("select socontainel_qty__c, socontainel_soshipdmd__c from socontainel__c where id = '"+ socontainelIdFetched + "'");               
                    var socontainelQty, socontainelSoshipdmd;
                    if (!isEmpty(socontainels) && socontainels.length > 0) {
                         socontainelQty = socontainels[0].socontainel_qty__c;
                         socontainelSoshipdmd = socontainels[0].socontainel_soshipdmd__c;                
                    } 
                    
                    socontainelQty = parseInt(socontainelQty); 
                    console.log(' socontainelQty '+socontainelQty); 
                    console.log(' socontainelSoshipdmd '+socontainelSoshipdmd); 
                    console.log(' socontainserCount '+socontainserCount);  
                    
                    if (socontainserCount > socontainelQty) {
                        alert('{!$Label.Serial_Numbers_entered_must_be_less_than_Container_Detail_Quantity}');
                        isvalid = false;
                        return false;
                    }
                    
                    if((socontainelSoshipdmd != undefined) && (socontainelSoshipdmd != '' && serialNoArrayStroing != '')) {
                        var duplicateSocontainels = execQuery("select id from socontainser__c where socontainser_soconatinel__r.socontainel_soshipdmd__c = '"+ socontainelSoshipdmd + "' and socontainser_srlno__c in ("+ serialNoArrayStroing + ") and socontainser_soconatinel__c != '"+socontainelIdFetched+"'");               
                     
                        if (!isEmpty(duplicateSocontainels) && duplicateSocontainels.length > 0) {
                            alert('{!$Label.Duplicate_Serial_Numbers_are_entered_for_Shipper_Demand}');
                            isvalid = false;
                            return false;
                        }
                    }
                } 
            }    
            return isvalid;
         }                   
    </script>
    <apex:dynamicComponent componentValue="{!DynamicRelatedLists}" rendered="{!isView}"/>
</apex:page>